name: Node.js CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
      - name: Frontend Complitaion (Syntax )
        run: |
          cd frontend
          find . -name "*.js" -exec node --check {} +
      - name: Backend Complitaion (Syntax )
        run: |
          cd backend
          find . -name "*.js" -exec node --check {} +


  gitleaks-scan:
    runs-on: ubuntu-latest
    needs: compile
    

    steps:
       - name: Checkout Code
         uses: actions/checkout@v4
         with:
          fetch-depth: 0 
       - name: Gitleaks Setup
         uses: gitleaks/gitleaks-action@v2
        
       - name: Gitleaks Scan
         run: |
           gitleaks detect --source ./frontend --exit-code 1
           gitleaks detect --source ./backend --exit-code 1
  trivy_fs_scan:
    runs-on: ubuntu-latest
    needs: gitleaks-scan

    steps:
       - name: Checkout Code
         uses: actions/checkout@v4
         with:
          fetch-depth: 0 
       - name: Run Trivy vulnerability scanner
         uses: aquasecurity/trivy-action@0.28.0
         with:
          scan-type: "fs"
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonar-frontend:
      runs-on: ubuntu-latest
      needs: trivy_fs_scan

      steps:
       - name: Checkout Code
         uses: actions/checkout@v4
         with:
          fetch-depth: 0 

       - name: SonarCloud Scan
         uses: sonarsource/sonarcloud-github-action@v5.0.0
         env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
         with:
           projectBaseDir: frontend
           args: >
             -Dsonar.organization=aslamel
             -Dsonar.projectKey=AslamEl_LearnGithubActions
             -Dsonar.sources=.
             -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
             -Dsonar.branch.name=${{ github.ref_name }}
         

  sonar-backend:
      runs-on: ubuntu-latest
      needs: sonar-frontend

      steps:
       - name: Checkout Code
         uses: actions/checkout@v4
         with:
          fetch-depth: 0 

       - name: SonarCloud Scan
         uses: sonarsource/sonarcloud-github-action@v5.0.0
         env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         with:
           projectBaseDir: backend
           args: >
             -Dsonar.organization=aslamel
             -Dsonar.projectKey=AslamEl_LearnGithubActions
             -Dsonar.sources=.
             -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
             -Dsonar.branch.name=${{ github.ref_name }}

  build_backend_docker_image_and_push:
      runs-on: ubuntu-latest
      needs: sonar-backend

      steps:
       - name: Checkout Code
         uses: actions/checkout@v4
         with:
          fetch-depth: 0 
       - name: Login to Docker Hub
         uses: docker/login-action@v3
         with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
           
       - name: Set up QEMU
         uses: docker/setup-qemu-action@v3

      
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v3

       - name: Build and push
         uses: docker/build-push-action@v6
         with:
          context: ./backend
          push: true
          tags: aslam22/todo-cicd-proj_1-backend:latest
          file: ./backend/Dockerfile
          
  build_frontend_docker_image_and_push:
      runs-on: ubuntu-latest
      needs: sonar-backend

      steps:
       - name: Checkout Code
         uses: actions/checkout@v4
         with:
          fetch-depth: 0 
       - name: Login to Docker Hub
         uses: docker/login-action@v3
         with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
           
       - name: Set up QEMU
         uses: docker/setup-qemu-action@v3

      
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v3

       - name: Build and push
         uses: docker/build-push-action@v6
         with:
          context: ./frontend
          push: true
          tags: aslam22/todo-cicd-proj_1-frontend:latest
          file: ./frontend/Dockerfile

  trivy_image_scan:
    runs-on: ubuntu-latest
    needs:  build_frontend_docker_image_and_push

    steps:
       - name: Checkout Code
         uses: actions/checkout@v4
         with:
          fetch-depth: 0 
       - name: Run Trivy image scan for backend
         uses: aquasecurity/trivy-action@0.28.0
         with:
          scan-type: image
          image-ref: aslam22/todo-cicd-proj_1-backend:latest
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

       - name: Run Trivy image scan for frontend
         uses: aquasecurity/trivy-action@0.28.0
         with:
          scan-type: image
          image-ref: aslam22/todo-cicd-proj_1-frontend:latest
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy_backend_railway:
    runs-on: ubuntu-latest
    needs: trivy_image_scan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Install Railway CLI
        run: curl -fsSL https://railway.app/install.sh | sh
  
      - name: Link Backend Project
        working-directory: backend
        run: railway link --project ${{ secrets.RAILWAY_PROJECT_ID }} --service ${{ secrets.RAILWAY_SERVICE_ID }}
        env:
          RAILWAY_API_KEY: ${{ secrets.RAILWAY_API_KEY }}

      - name: Deploy Backend to Railway
        working-directory: backend
        run: railway up --ci
        env:
          RAILWAY_API_KEY: ${{ secrets.RAILWAY_API_KEY }}



          
      
     
      
    
         
         
          
    

         
      

      

      










         
         
      

     
